{>"layout/layout.dust"/}

{<content}
<style>
.image{
  max-width: 100%;
  max-height: 400px;
}
.imgbox{
  margin: 0 auto 10px;
}
.tries-wrapper {display: none;}
#tryagain {display: none;}

#gamesLeftBox{
  margin-top: -63px;
  margin-right: -29px;
}
.questionbox{
  font-size: 25px;
  text-align: center;
  max-width: 450px;
}

.questions{
  padding: 5px;
  color: black;
}

.questions button{
  font-size: 16px;
  text-shadow: 0 0px 0 rgba(0,0,0,0) !important;
}

#game_overview, #game_result{
  display: none;
}

.list-group-item{
  margin: 0 auto;
  float: none;
}

</style>

<h3>{game.title}</h3>
<input type="hidden" name="gameid" value="{game._id}" />
<div class="well">
  <div id="questions_container">
    <!--Here be HTML-->
    <div class="progress progress-striped active">
      <div class="progress-bar"  role="progressbar"
      aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
        <span class="sr-only">Lädt...</span>
      </div>
    </div>
    <!--Here be HTML-->
  </div>
</div>

<br>
<div class="well" style="max-width:300px; margin: 0 auto 10px;">
  <button id="next_question" type="button" class="btn btn-primary btn-block">Nächste Frage</button>
  <button id="game_result" type="button" class="btn btn-success btn-block">Lösung anzeigen</button>
  <button id="game_overview" type="button" class="btn btn-danger btn-block">Zurück zur Spielübersicht</button>
  <span id="gamesLeftBox" class="badge pull-right">Verbleibende Spiele: <span id="gamesLeft"></span></span>
</div>

<script>
var questionIds = [{#game.multiplechoice_question_reference}"{.}"{@sep},{/sep}{/game.multiplechoice_question_reference}],
  actualIndex = 0,
  selectedAnswers = [],
  gamesCount = {game.multiplechoice_question_reference.length}-1;

String.prototype.hashCode = function(){
    var hash = 0, i, char;
    if (this.length == 0) return hash;
    for (i = 0, l = this.length; i < l; i++) {
        char  = this.charCodeAt(i);
        hash  = ((hash<<5)-hash)+char;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
};

$(window).ready(function(){

  function loadQuestion(questionId) {
    $.ajax({url: "/games/multiplechoice/question?id="+questionId})
      .done(function( data ) {
        $('#questions_container').html(data);
      });
  }

  function doNext() {
    $('#next_question').prop('disabled', false);
    if (questionIds.length > (actualIndex+1) ) {
      $('#next_question').show();
    }
    else {
      $('#next_question').hide();
      $('#game_overview').hide();
      $('#game_result').show();
    }
  }



  $('#next_question').click(function(){
    actualIndex++;
    loadQuestion(questionIds[actualIndex]);
    $('#gamesLeft').text(gamesCount--);
    $(this).prop('disabled', true);
  });



  $('#game_overview').click(function(){
    location.href = '/games/multiplechoice/';
  });


  $('#game_result').click(function(){
    selectedAnswers = selectedAnswers.join("-");
    console.log(selectedAnswers)
    $.ajax({url: "/games/multiplechoice/result?id=" + 
      "{game._id}" +
      "&result=" +
      selectedAnswers})
      .done(function( data ) {
        $('#questions_container').html(data);
      });
    $('#game_result').hide();
    $('#game_overview').show();
  });


  $('#questions_container').on('click', '.select-answer', function(){
    var rightAnswers = $('#questions_container').find('.right-answers').text().split(','),
      answer = $(this).parents('.input-group').find('.answer').val(),
      hash = '' + answer.hashCode();
    $('.input-group span button').each(function () {
      $(this).removeClass('btn-info');    
    })
    $(this).addClass('btn-info');
    
    // TODO: just add the hash to selectedAnswers
    // selectedAnswers[actualIndex] = hash;
    if ($.inArray(hash, rightAnswers) >= 0) {
      selectedAnswers[actualIndex] = true;
    }
    else {
      selectedAnswers[actualIndex] = false;
    }
    doNext();
  });

  loadQuestion(questionIds[actualIndex]);

  $('#gamesLeft').text(gamesCount--);
  $('#next_question').prop('disabled', true);
});
</script>
{/content}